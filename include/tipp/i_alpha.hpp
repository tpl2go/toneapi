#pragma once
#include "tipp_error.hpp"
#include "tipp_type.hpp"
#include <ipp/ippi.h>

namespace tipp {
  namespace i {

    template <typename T, IppChannels C>
    static inline IppStatus AlphaComp(const T *pSrc1, int src1Step, const T *pSrc2, int src2Step, T *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType);
    template <> static inline IppStatus AlphaComp<Ipp8u, ippAC1>(const Ipp8u *pSrc1, int src1Step, const Ipp8u *pSrc2, int src2Step, Ipp8u *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_8u_AC1R(pSrc1, src1Step, pSrc2, src2Step, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp<Ipp16u, ippAC1>(const Ipp16u *pSrc1, int src1Step, const Ipp16u *pSrc2, int src2Step, Ipp16u *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_16u_AC1R(pSrc1, src1Step, pSrc2, src2Step, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp<Ipp16s, ippAC1>(const Ipp16s *pSrc1, int src1Step, const Ipp16s *pSrc2, int src2Step, Ipp16s *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_16s_AC1R(pSrc1, src1Step, pSrc2, src2Step, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp<Ipp32u, ippAC1>(const Ipp32u *pSrc1, int src1Step, const Ipp32u *pSrc2, int src2Step, Ipp32u *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_32u_AC1R(pSrc1, src1Step, pSrc2, src2Step, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp<Ipp32s, ippAC1>(const Ipp32s *pSrc1, int src1Step, const Ipp32s *pSrc2, int src2Step, Ipp32s *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_32s_AC1R(pSrc1, src1Step, pSrc2, src2Step, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp<Ipp32f, ippAC1>(const Ipp32f *pSrc1, int src1Step, const Ipp32f *pSrc2, int src2Step, Ipp32f *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_32f_AC1R(pSrc1, src1Step, pSrc2, src2Step, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp<Ipp8u, ippAC4>(const Ipp8u *pSrc1, int src1Step, const Ipp8u *pSrc2, int src2Step, Ipp8u *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_8u_AC4R(pSrc1, src1Step, pSrc2, src2Step, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp<Ipp16u, ippAC4>(const Ipp16u *pSrc1, int src1Step, const Ipp16u *pSrc2, int src2Step, Ipp16u *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_16u_AC4R(pSrc1, src1Step, pSrc2, src2Step, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp<Ipp16s, ippAC4>(const Ipp16s *pSrc1, int src1Step, const Ipp16s *pSrc2, int src2Step, Ipp16s *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_16s_AC4R(pSrc1, src1Step, pSrc2, src2Step, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp<Ipp32u, ippAC4>(const Ipp32u *pSrc1, int src1Step, const Ipp32u *pSrc2, int src2Step, Ipp32u *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_32u_AC4R(pSrc1, src1Step, pSrc2, src2Step, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp<Ipp32s, ippAC4>(const Ipp32s *pSrc1, int src1Step, const Ipp32s *pSrc2, int src2Step, Ipp32s *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_32s_AC4R(pSrc1, src1Step, pSrc2, src2Step, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp<Ipp32f, ippAC4>(const Ipp32f *pSrc1, int src1Step, const Ipp32f *pSrc2, int src2Step, Ipp32f *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_32f_AC4R(pSrc1, src1Step, pSrc2, src2Step, pDst, dstStep, roiSize, alphaType)); }

    template <typename T, IppChannels C>
    static inline IppStatus AlphaComp(const T *const pSrc1[4], int src1Step, const T *const pSrc2[4], int src2Step, T *const pDst[4], int dstStep, IppiSize roiSize, IppiAlphaType alphaType);
    template <> static inline IppStatus AlphaComp<Ipp8u, ippAP4>(const Ipp8u *const pSrc1[4], int src1Step, const Ipp8u *const pSrc2[4], int src2Step, Ipp8u *const pDst[4], int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_8u_AP4R(pSrc1, src1Step, pSrc2, src2Step, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp<Ipp16u, ippAP4>(const Ipp16u *const pSrc1[4], int src1Step, const Ipp16u *const pSrc2[4], int src2Step, Ipp16u *const pDst[4], int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_16u_AP4R(pSrc1, src1Step, pSrc2, src2Step, pDst, dstStep, roiSize, alphaType)); }

    template <typename T, IppChannels C>
    static inline IppStatus AlphaComp_I(const T *pSrc, int srcStep, T *pSrcDst, int srcDstStep, IppiSize roiSize, IppiAlphaType alphaType);
    template <> static inline IppStatus AlphaComp_I<Ipp8u, ippAC4>(const Ipp8u *pSrc, int srcStep, Ipp8u *pSrcDst, int srcDstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_8u_AC4IR(pSrc, srcStep, pSrcDst, srcDstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp_I<Ipp16u, ippAC4>(const Ipp16u *pSrc, int srcStep, Ipp16u *pSrcDst, int srcDstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_16u_AC4IR(pSrc, srcStep, pSrcDst, srcDstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp_I<Ipp16s, ippAC4>(const Ipp16s *pSrc, int srcStep, Ipp16s *pSrcDst, int srcDstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_16s_AC4IR(pSrc, srcStep, pSrcDst, srcDstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp_I<Ipp32u, ippAC4>(const Ipp32u *pSrc, int srcStep, Ipp32u *pSrcDst, int srcDstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_32u_AC4IR(pSrc, srcStep, pSrcDst, srcDstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp_I<Ipp32s, ippAC4>(const Ipp32s *pSrc, int srcStep, Ipp32s *pSrcDst, int srcDstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_32s_AC4IR(pSrc, srcStep, pSrcDst, srcDstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp_I<Ipp32f, ippAC4>(const Ipp32f *pSrc, int srcStep, Ipp32f *pSrcDst, int srcDstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_32f_AC4IR(pSrc, srcStep, pSrcDst, srcDstStep, roiSize, alphaType)); }

    template <typename T, IppChannels C>
    static inline IppStatus AlphaComp_I(const T *const pSrc[4], int srcStep, T *const pSrcDst[4], int srcDstStep, IppiSize roiSize, IppiAlphaType alphaType);
    template <> static inline IppStatus AlphaComp_I<Ipp8u, ippAP4>(const Ipp8u *const pSrc[4], int srcStep, Ipp8u *const pSrcDst[4], int srcDstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_8u_AP4IR(pSrc, srcStep, pSrcDst, srcDstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaComp_I<Ipp16u, ippAP4>(const Ipp16u *const pSrc[4], int srcStep, Ipp16u *const pSrcDst[4], int srcDstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaComp_16u_AP4IR(pSrc, srcStep, pSrcDst, srcDstStep, roiSize, alphaType)); }

    template <typename T, IppChannels C>
    static inline IppStatus AlphaCompC(const T *pSrc1, int src1Step, T alpha1, const T *pSrc2, int src2Step, T alpha2, T *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType);
    template <> static inline IppStatus AlphaCompC<Ipp8u, ippC1>(const Ipp8u *pSrc1, int src1Step, Ipp8u alpha1, const Ipp8u *pSrc2, int src2Step, Ipp8u alpha2, Ipp8u *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_8u_C1R(pSrc1, src1Step, alpha1, pSrc2, src2Step, alpha2, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC<Ipp8u, ippC3>(const Ipp8u *pSrc1, int src1Step, Ipp8u alpha1, const Ipp8u *pSrc2, int src2Step, Ipp8u alpha2, Ipp8u *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_8u_C3R(pSrc1, src1Step, alpha1, pSrc2, src2Step, alpha2, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC<Ipp8u, ippC4>(const Ipp8u *pSrc1, int src1Step, Ipp8u alpha1, const Ipp8u *pSrc2, int src2Step, Ipp8u alpha2, Ipp8u *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_8u_C4R(pSrc1, src1Step, alpha1, pSrc2, src2Step, alpha2, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC<Ipp8u, ippAC4>(const Ipp8u *pSrc1, int src1Step, Ipp8u alpha1, const Ipp8u *pSrc2, int src2Step, Ipp8u alpha2, Ipp8u *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_8u_AC4R(pSrc1, src1Step, alpha1, pSrc2, src2Step, alpha2, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC<Ipp16u, ippC1>(const Ipp16u *pSrc1, int src1Step, Ipp16u alpha1, const Ipp16u *pSrc2, int src2Step, Ipp16u alpha2, Ipp16u *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_16u_C1R(pSrc1, src1Step, alpha1, pSrc2, src2Step, alpha2, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC<Ipp16u, ippC3>(const Ipp16u *pSrc1, int src1Step, Ipp16u alpha1, const Ipp16u *pSrc2, int src2Step, Ipp16u alpha2, Ipp16u *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_16u_C3R(pSrc1, src1Step, alpha1, pSrc2, src2Step, alpha2, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC<Ipp16u, ippC4>(const Ipp16u *pSrc1, int src1Step, Ipp16u alpha1, const Ipp16u *pSrc2, int src2Step, Ipp16u alpha2, Ipp16u *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_16u_C4R(pSrc1, src1Step, alpha1, pSrc2, src2Step, alpha2, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC<Ipp16u, ippAC4>(const Ipp16u *pSrc1, int src1Step, Ipp16u alpha1, const Ipp16u *pSrc2, int src2Step, Ipp16u alpha2, Ipp16u *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_16u_AC4R(pSrc1, src1Step, alpha1, pSrc2, src2Step, alpha2, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC<Ipp16s, ippC1>(const Ipp16s *pSrc1, int src1Step, Ipp16s alpha1, const Ipp16s *pSrc2, int src2Step, Ipp16s alpha2, Ipp16s *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_16s_C1R(pSrc1, src1Step, alpha1, pSrc2, src2Step, alpha2, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC<Ipp32u, ippC1>(const Ipp32u *pSrc1, int src1Step, Ipp32u alpha1, const Ipp32u *pSrc2, int src2Step, Ipp32u alpha2, Ipp32u *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_32u_C1R(pSrc1, src1Step, alpha1, pSrc2, src2Step, alpha2, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC<Ipp32s, ippC1>(const Ipp32s *pSrc1, int src1Step, Ipp32s alpha1, const Ipp32s *pSrc2, int src2Step, Ipp32s alpha2, Ipp32s *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_32s_C1R(pSrc1, src1Step, alpha1, pSrc2, src2Step, alpha2, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC<Ipp32f, ippC1>(const Ipp32f *pSrc1, int src1Step, Ipp32f alpha1, const Ipp32f *pSrc2, int src2Step, Ipp32f alpha2, Ipp32f *pDst, int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_32f_C1R(pSrc1, src1Step, alpha1, pSrc2, src2Step, alpha2, pDst, dstStep, roiSize, alphaType)); }

    template <typename T, IppChannels C>
    static inline IppStatus AlphaCompC(const T *const pSrc1[4], int src1Step, T alpha1, const T *const pSrc2[4], int src2Step, T alpha2, T *const pDst[4], int dstStep, IppiSize roiSize, IppiAlphaType alphaType);
    template <> static inline IppStatus AlphaCompC<Ipp8u, ippAP4>(const Ipp8u *const pSrc1[4], int src1Step, Ipp8u alpha1, const Ipp8u *const pSrc2[4], int src2Step, Ipp8u alpha2, Ipp8u *const pDst[4], int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_8u_AP4R(pSrc1, src1Step, alpha1, pSrc2, src2Step, alpha2, pDst, dstStep, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC<Ipp16u, ippAP4>(const Ipp16u *const pSrc1[4], int src1Step, Ipp16u alpha1, const Ipp16u *const pSrc2[4], int src2Step, Ipp16u alpha2, Ipp16u *const pDst[4], int dstStep, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_16u_AP4R(pSrc1, src1Step, alpha1, pSrc2, src2Step, alpha2, pDst, dstStep, roiSize, alphaType)); }

    template <typename T, IppChannels C>
    static inline IppStatus AlphaCompC_I(const T *pSrc, int srcStep, T alpha1, T *pSrcDst, int srcDstStep, T alpha2, IppiSize roiSize, IppiAlphaType alphaType);
    template <> static inline IppStatus AlphaCompC_I<Ipp8u, ippC1>(const Ipp8u *pSrc, int srcStep, Ipp8u alpha1, Ipp8u *pSrcDst, int srcDstStep, Ipp8u alpha2, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_8u_C1IR(pSrc, srcStep, alpha1, pSrcDst, srcDstStep, alpha2, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC_I<Ipp16u, ippC1>(const Ipp16u *pSrc, int srcStep, Ipp16u alpha1, Ipp16u *pSrcDst, int srcDstStep, Ipp16u alpha2, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_16u_C1IR(pSrc, srcStep, alpha1, pSrcDst, srcDstStep, alpha2, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC_I<Ipp16s, ippC1>(const Ipp16s *pSrc, int srcStep, Ipp16s alpha1, Ipp16s *pSrcDst, int srcDstStep, Ipp16s alpha2, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_16s_C1IR(pSrc, srcStep, alpha1, pSrcDst, srcDstStep, alpha2, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC_I<Ipp32s, ippC1>(const Ipp32s *pSrc, int srcStep, Ipp32s alpha1, Ipp32s *pSrcDst, int srcDstStep, Ipp32s alpha2, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_32s_C1IR(pSrc, srcStep, alpha1, pSrcDst, srcDstStep, alpha2, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC_I<Ipp32u, ippC1>(const Ipp32u *pSrc, int srcStep, Ipp32u alpha1, Ipp32u *pSrcDst, int srcDstStep, Ipp32u alpha2, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_32u_C1IR(pSrc, srcStep, alpha1, pSrcDst, srcDstStep, alpha2, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC_I<Ipp32f, ippC1>(const Ipp32f *pSrc, int srcStep, Ipp32f alpha1, Ipp32f *pSrcDst, int srcDstStep, Ipp32f alpha2, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_32f_C1IR(pSrc, srcStep, alpha1, pSrcDst, srcDstStep, alpha2, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC_I<Ipp8u, ippC3>(const Ipp8u *pSrc, int srcStep, Ipp8u alpha1, Ipp8u *pSrcDst, int srcDstStep, Ipp8u alpha2, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_8u_C3IR(pSrc, srcStep, alpha1, pSrcDst, srcDstStep, alpha2, roiSize, alphaType)); }
    template <> static inline IppStatus AlphaCompC_I<Ipp16u, ippC3>(const Ipp16u *pSrc, int srcStep, Ipp16u alpha1, Ipp16u *pSrcDst, int srcDstStep, Ipp16u alpha2, IppiSize roiSize, IppiAlphaType alphaType) { return OptionalAssertNoError(ippiAlphaCompC_16u_C3IR(pSrc, srcStep, alpha1, pSrcDst, srcDstStep, alpha2, roiSize, alphaType)); }

    template <typename T, IppChannels C>
    static inline IppStatus AlphaPremul(const T *pSrc, int srcStep, T *pDst, int dstStep, IppiSize roiSize);
    template <> static inline IppStatus AlphaPremul<Ipp8u, ippAC4>(const Ipp8u *pSrc, int srcStep, Ipp8u *pDst, int dstStep, IppiSize roiSize) { return OptionalAssertNoError(ippiAlphaPremul_8u_AC4R(pSrc, srcStep, pDst, dstStep, roiSize)); }
    template <> static inline IppStatus AlphaPremul<Ipp16u, ippAC4>(const Ipp16u *pSrc, int srcStep, Ipp16u *pDst, int dstStep, IppiSize roiSize) { return OptionalAssertNoError(ippiAlphaPremul_16u_AC4R(pSrc, srcStep, pDst, dstStep, roiSize)); }

    template <typename T, IppChannels C>
    static inline IppStatus AlphaPremul(const T *const pSrc[4], int srcStep, T *const pDst[4], int dstStep, IppiSize roiSize);
    template <> static inline IppStatus AlphaPremul<Ipp8u, ippAP4>(const Ipp8u *const pSrc[4], int srcStep, Ipp8u *const pDst[4], int dstStep, IppiSize roiSize) { return OptionalAssertNoError(ippiAlphaPremul_8u_AP4R(pSrc, srcStep, pDst, dstStep, roiSize)); }
    template <> static inline IppStatus AlphaPremul<Ipp16u, ippAP4>(const Ipp16u *const pSrc[4], int srcStep, Ipp16u *const pDst[4], int dstStep, IppiSize roiSize) { return OptionalAssertNoError(ippiAlphaPremul_16u_AP4R(pSrc, srcStep, pDst, dstStep, roiSize)); }

    template <typename T, IppChannels C>
    static inline IppStatus AlphaPremul_I(T *pSrcDst, int srcDstStep, IppiSize roiSize);
    template <> static inline IppStatus AlphaPremul_I<Ipp8u, ippAC4>(Ipp8u *pSrcDst, int srcDstStep, IppiSize roiSize) { return OptionalAssertNoError(ippiAlphaPremul_8u_AC4IR(pSrcDst, srcDstStep, roiSize)); }
    template <> static inline IppStatus AlphaPremul_I<Ipp16u, ippAC4>(Ipp16u *pSrcDst, int srcDstStep, IppiSize roiSize) { return OptionalAssertNoError(ippiAlphaPremul_16u_AC4IR(pSrcDst, srcDstStep, roiSize)); }

    template <typename T, IppChannels C>
    static inline IppStatus AlphaPremul_I(T *const pSrcDst[4], int srcDstStep, IppiSize roiSize);
    template <> static inline IppStatus AlphaPremul_I<Ipp8u, ippAP4>(Ipp8u *const pSrcDst[4], int srcDstStep, IppiSize roiSize) { return OptionalAssertNoError(ippiAlphaPremul_8u_AP4IR(pSrcDst, srcDstStep, roiSize)); }
    template <> static inline IppStatus AlphaPremul_I<Ipp16u, ippAP4>(Ipp16u *const pSrcDst[4], int srcDstStep, IppiSize roiSize) { return OptionalAssertNoError(ippiAlphaPremul_16u_AP4IR(pSrcDst, srcDstStep, roiSize)); }

  } // namespace i
} // namespace tipp
